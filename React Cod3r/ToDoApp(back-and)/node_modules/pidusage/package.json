{
  "_args": [
    [
      {
        "raw": "pidusage@2.0.17",
        "scope": null,
        "escapedName": "pidusage",
        "name": "pidusage",
        "rawSpec": "2.0.17",
        "spec": "2.0.17",
        "type": "version"
      },
      "C:\\Users\\Usuario\\Documents\\Cursos\\Curso React\\ReactJS\\React Cod3r\\ToDoApp(back-and)\\node_modules\\pm2"
    ]
  ],
  "_from": "pidusage@2.0.17",
  "_hasShrinkwrap": false,
  "_id": "pidusage@2.0.17",
  "_location": "/pidusage",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/pidusage_2.0.17_1536741363118_0.26250533462038605"
  },
  "_npmUser": {
    "name": "soyuka",
    "email": "soyuka@gmail.com"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pidusage@2.0.17",
    "scope": null,
    "escapedName": "pidusage",
    "name": "pidusage",
    "rawSpec": "2.0.17",
    "spec": "2.0.17",
    "type": "version"
  },
  "_requiredBy": [
    "/pm2"
  ],
  "_resolved": "https://registry.npmjs.org/pidusage/-/pidusage-2.0.17.tgz",
  "_shasum": "6b4a2b4a09026f0e9828f7e5627837e4c0672581",
  "_shrinkwrap": null,
  "_spec": "pidusage@2.0.17",
  "_where": "C:\\Users\\Usuario\\Documents\\Cursos\\Curso React\\ReactJS\\React Cod3r\\ToDoApp(back-and)\\node_modules\\pm2",
  "author": {
    "name": "soyuka"
  },
  "ava": {
    "verbose": true
  },
  "bugs": {
    "url": "https://github.com/soyuka/pidusage/issues"
  },
  "contributors": [
    {
      "name": "Simone Primarosa",
      "email": "simonepri@outlook.com",
      "url": "https://simoneprimarosa.com"
    }
  ],
  "dependencies": {
    "safe-buffer": "^5.1.2"
  },
  "description": "Cross-platform process cpu % and memory usage of a PID",
  "devDependencies": {
    "ava": "*",
    "codecov": "^3.0.2",
    "mockdate": "^2.0.2",
    "mockery": "2.1.0",
    "nyc": "13.0.0",
    "pify": "^3.0.0",
    "standard": "*",
    "string-to-stream": "^1.1.0",
    "through": "^2.3.8",
    "time-span": "^2.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-N8X5v18rBmlBoArfS83vrnD0gIFyZkXEo7a5pAS2aT0i2OLVymFb2AzVg+v8l/QcXnE1JwZcaXR8daJcoJqtjw==",
    "shasum": "6b4a2b4a09026f0e9828f7e5627837e4c0672581",
    "tarball": "https://registry.npmjs.org/pidusage/-/pidusage-2.0.17.tgz",
    "fileCount": 13,
    "unpackedSize": 30980,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbmM/0CRA9TVsSAnZWagAA5YgP+wYTINI1EghQaM8s6sCE\n3iHBdDfT6uJgq1O8UR7WeXo8lxWLxnNWm+Fm8IRI8xpk9iSt235Su+hetDJ/\nPfg2KaKfWVPW9FzjzXivTvh2WlamltOeV9Awm/LYeFaap1RASoMk7OOLzBQB\nYtrEo7tEW8rR0CEDzkSzWI1WNaoUFCAtDK/cet5NVO+zVMtKp8iPahJ+P1C0\n7RRTV2oPljVgIDoYu3ZvYosyuCAplHgkG2sIdh0fNHgFy5oEg9WMnJVtW4uG\nVHlh0mMzne4b1LMG/jr2thk+BFfsjwnuCJsUtqB1eMFjPkcJ1rOttJiQvPh+\n+abwOmx4jCoJ4Pmm8TayqIqGT4+kvfLX4LqHAUMHo5jfp0UYEoeBIZxQlsFI\nPRVyktHyTiH3JnXNJ+AA83S/1wVdHbtZGi47GESp1iw9hvU/eKbJq0VmrLiI\nnvhvD7ICj+lpC6JhksFjeHwgjvXD/ixgNF6bxlQ0dHIPOcPpIGh303BN5DzE\nRSrOHQbWA/lNOj7jun3yVrMAKR8qIiJjo3pfB0Ev6dnFtHiDYb3GVnHSjips\nEKgOCAz4z7ADtaZH/S818DBFTuu8aibeumtXTpByvS1OSkqDeTUMN13nUnFQ\n2pN0WV1NOScTBCZjmahcsKPfemnnU/hBjRUCnS1rhcGz9SlbLucHdIP8MEP3\nsNRa\r\n=Wz/q\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "lib",
    "index.js"
  ],
  "gitHead": "74ad6b3fed9bc865896cafb12881e05043c1b171",
  "homepage": "https://github.com/soyuka/pidusage",
  "keywords": [
    "pid",
    "usage",
    "ps",
    "cpu",
    "memory",
    "proc"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "soyuka",
      "email": "soyuka@gmail.com"
    }
  ],
  "name": "pidusage",
  "nyc": {
    "reporter": [
      "lcovonly",
      "text"
    ]
  },
  "optionalDependencies": {},
  "readme": "# pidusage\n\n[![Mac/Linux Build Status](https://img.shields.io/travis/soyuka/pidusage/master.svg?label=MacOS%20%26%20Linux)](https://travis-ci.org/soyuka/pidusage)\n[![Windows Build status](https://img.shields.io/appveyor/ci/soyuka/pidusage/master.svg?label=Windows)](https://ci.appveyor.com/project/soyuka/pidusage)\n[![Code coverage](https://img.shields.io/codecov/c/github/soyuka/pidusage/master.svg)](https://codecov.io/gh/soyuka/pidusage)\n[![npm version](https://img.shields.io/npm/v/pidusage.svg)](https://www.npmjs.com/package/pidusage)\n[![license](https://img.shields.io/github/license/soyuka/pidusage.svg)](https://github.com/soyuka/pidusage/tree/master/license)\n\nCross-platform process cpu % and memory usage of a PID.\n\n## Synopsis\n\nIdeas from https://github.com/arunoda/node-usage but with no C-bindings.\n\nPlease note that if you need to check a Node.JS script process cpu and memory usage, you can use [`process.cpuUsage`][node:cpuUsage] and [`process.memoryUsage`][node:memUsage] since node v6.1.0. This script remain useful when you have no control over the remote script, or if the process is not a Node.JS process.\n\n\n## Usage\n\n```js\nvar pidusage = require('pidusage')\n\n// Compute statistics every second:\nsetInterval(function () {\n  pidusage(process.pid, function (err, stats) {\n    console.log(stats)\n    // => {\n    //   cpu: 10.0,            // percentage (from 0 to 100*vcore)\n    //   memory: 357306368,    // bytes\n    //   ppid: 312,            // PPID\n    //   pid: 727,             // PID\n    //   ctime: 867000,        // ms user + system time\n    //   elapsed: 6650000,     // ms since the start of the process\n    //   timestamp: 864000000  // ms since epoch\n    // }\n  })\n}, 1000)\n\n// It supports also multiple pids\npidusage([727, 1234], function (err, stats) {\n  console.log(stats)\n  // => {\n  //   727: {\n  //     cpu: 10.0,            // percentage (from 0 to 100*vcore)\n  //     memory: 357306368,    // bytes\n  //     ppid: 312,            // PPID\n  //     pid: 727,             // PID\n  //     ctime: 867000,        // ms user + system time\n  //     elapsed: 6650000,     // ms since the start of the process\n  //     timestamp: 864000000  // ms since epoch\n  //   },\n  //   1234: {\n  //     cpu: 0.1,             // percentage (from 0 to 100*vcore)\n  //     memory: 3846144,      // bytes\n  //     ppid: 727,            // PPID\n  //     pid: 1234,            // PID\n  //     ctime: 0,             // ms user + system time\n  //     elapsed: 20000,       // ms since the start of the process\n  //     timestamp: 864000000  // ms since epoch\n  //   }\n  // }\n})\n\n// If no callback is given it returns a promise instead\nconst stats = await pidusage(process.pid)\nconsole.log(stats)\n// => {\n//   cpu: 10.0,            // percentage (from 0 to 100*vcore)\n//   memory: 357306368,    // bytes\n//   ppid: 312,            // PPID\n//   pid: 727,             // PID\n//   ctime: 867000,        // ms user + system time\n//   elapsed: 6650000,     // ms since the start of the process\n//   timestamp: 864000000  // ms since epoch\n// }\n```\n\n## Compatibility\n\n| Property | Linux | FreeBSD | NetBSD | SunOS | macOS | Win | AIX | Alpine\n| ---         | --- | --- | --- | --- | --- | --- | --- | --- |\n| `cpu`       | ✅ | ❓ | ❓ | ❓ | ✅ | ℹ️ | ❓ | ✅ |\n| `memory`    | ✅ | ❓ | ❓ | ❓ | ✅ | ✅ | ❓ | ✅ |\n| `pid`       | ✅ | ❓ | ❓ | ❓ | ✅ | ✅ | ❓ | ✅ |\n| `ctime`     | ✅ | ❓ | ❓ | ❓ | ✅ | ✅ | ❓ | ✅ |\n| `elapsed`   | ✅ | ❓ | ❓ | ❓ | ✅ | ✅ | ❓ | ✅ |\n| `timestamp` | ✅ | ❓ | ❓ | ❓ | ✅ | ✅ | ❓ | ✅ |\n\n✅ = Working\nℹ️ = Not Accurate\n❓ = Should Work\n❌ = Not Working\n\nPlease if your platform is not supported or if you have reported wrong readings\n[file an issue][new issue].\n\n## API\n\n<a name=\"pidusage\"></a>\n\n### pidusage(pids, [options = {}], [callback]) ⇒ <code>[Promise.&lt;Object&gt;]</code>\nGet pid informations.\n\n**Kind**: global function\n**Returns**: <code>Promise.&lt;Object&gt;</code> - Only when the callback is not provided.\n**Access**: public\n\n| Param | Type | Description |\n| --- | --- | --- |\n| pids | <code>Number</code> \\| <code>Array.&lt;Number&gt;</code> \\| <code>String</code> \\| <code>Array.&lt;String&gt;</code> | A pid or a list of pids. |\n| [callback] | <code>function</code> | Called when the statistics are ready. If not provided a promise is returned instead. |\n\n### pidusage.clear()\n\nIf needed this function can be used to clear the event loop. Indeed, we're registering an interval to free up the in-memory metrics. By calling this, it will clear this interval and all delete all in-memory data.\n\n## Related\n- [pidusage-tree][gh:pidusage-tree] -\nCompute a pidusage tree\n\n## Authors\n- **Antoine Bluchet** - [soyuka][github:soyuka]\n- **Simone Primarosa** - [simonepri][github:simonepri]\n\nSee also the list of [contributors][contributors] who participated in this project.\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE][license] file for details.\n\n<!-- Links -->\n[new issue]: https://github.com/soyuka/pidusage/issues/new\n[license]: https://github.com/soyuka/pidusage/tree/master/LICENSE\n[contributors]: https://github.com/soyuka/pidusage/contributors\n\n[github:soyuka]: https://github.com/soyuka\n[github:simonepri]: https://github.com/simonepri\n\n[gh:pidusage-tree]: https://github.com/soyuka/pidusage-tree\n\n[node:cpuUsage]: https://nodejs.org/api/process.html#process_process_cpuusage_previousvalue\n[node:memUsage]: https://nodejs.org/api/process.html#process_process_memoryusage\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/soyuka/pidusage.git"
  },
  "scripts": {
    "alpine": "docker run -v $(pwd):/var/pidusage pidusage:latest npm test",
    "bench": "ava -m \"*benchmark*\"",
    "coverage": "codecov",
    "lint": "standard",
    "test": "standard && nyc ava -m \"!*benchmark*\""
  },
  "version": "2.0.17"
}
