{
  "_args": [
    [
      {
        "raw": "culvert@^0.1.2",
        "scope": null,
        "escapedName": "culvert",
        "name": "culvert",
        "rawSpec": "^0.1.2",
        "spec": ">=0.1.2 <0.2.0",
        "type": "range"
      },
      "C:\\Users\\Usuario\\Documents\\Cursos\\Curso React\\ReactJS\\React Cod3r\\ToDoApp(back-and)\\node_modules\\js-git"
    ]
  ],
  "_from": "culvert@>=0.1.2 <0.2.0",
  "_id": "culvert@0.1.2",
  "_inCache": true,
  "_location": "/culvert",
  "_npmUser": {
    "name": "creationix",
    "email": "tim@creationix.com"
  },
  "_npmVersion": "1.4.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "culvert@^0.1.2",
    "scope": null,
    "escapedName": "culvert",
    "name": "culvert",
    "rawSpec": "^0.1.2",
    "spec": ">=0.1.2 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/js-git"
  ],
  "_resolved": "https://registry.npmjs.org/culvert/-/culvert-0.1.2.tgz",
  "_shasum": "9502f5f0154a2d5a22a023e79f71cc936fa6ef6f",
  "_shrinkwrap": null,
  "_spec": "culvert@^0.1.2",
  "_where": "C:\\Users\\Usuario\\Documents\\Cursos\\Curso React\\ReactJS\\React Cod3r\\ToDoApp(back-and)\\node_modules\\js-git",
  "author": {
    "name": "Tim Caswell",
    "email": "tim@creationix.com"
  },
  "bugs": {
    "url": "https://github.com/creationix/culvert/issues"
  },
  "dependencies": {},
  "description": "Channel for easy streaming of work between complex logics.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "9502f5f0154a2d5a22a023e79f71cc936fa6ef6f",
    "tarball": "https://registry.npmjs.org/culvert/-/culvert-0.1.2.tgz"
  },
  "homepage": "https://github.com/creationix/culvert",
  "keywords": [
    "channel",
    "stream",
    "csp",
    "js-git"
  ],
  "license": "MIT",
  "main": "channel.js",
  "maintainers": [
    {
      "name": "creationix",
      "email": "tim@creationix.com"
    }
  ],
  "name": "culvert",
  "optionalDependencies": {},
  "readme": "Culvert\n=======\n\nChannel for easy streaming of work between complex logics.\n\nThis is used in place of streams for CSP style flow.  I use it in js-git for network and file streams.\n\nUsually, you'll want to split sides to create a duplex channel.\n\n```js\nvar makeChannel = require('culvert');\n\nvar serverChannel = makeChannel();\nvar clientChannel = makeChannel();\n\nfunction connect(host, port) {\n\n  // This represents the server-side of the duplex pipe\n  var socket = {\n    put: serverChannel.put,\n    drain: serverChannel.drain,\n    take: cientChannel.drain\n  };\n\n  // When we want to send data to the consumer...\n  socket.put(someData);\n\n  // When we want to read from the consumer...\n  socket.take(function (err, item) {});\n\n  // Return the client's end of the pipe\n  return {\n    put: clientChannel.put,\n    drain: clientChannel.drain,\n    take: serverChannel.take\n  };\n}\n```\n\nIf you want/need to preserve back-pressure and honor the buffer limit,\nmake sure to wait for drain when `put` returns false.\n\n```js\n// Start a read\nsocket.take(onData);\n\nfunction onData(err, item) {\n  if (err) throw err;\n  if (item === undefined) {\n    // End stream when nothing comes out\n    console.log(\"done\");\n  }\n  else if (socket.put(item)) {\n    // If put returned true, keep reading\n    socket.take(onData);\n  }\n  else {\n    // Otherwise pause and wait for drain\n    socket.drain(onDrain);\n  }\n}\n\nfunction onDrain(err) {\n  if (err) throw err;\n  // Resume reading\n  socket.take(onData);\n}\n```\n\nIf you're using continuables and generators, it's much nicer syntax.\n\n```js\nvar item;\nwhile (item = yield socket.take, item !== undefined) {\n  if (!socket.put(item)) yield socket.drain;\n}\nconsole.log(\"done\");\n```\n\nAlso the continuable version won't blow the stack if lots of events come in on the same tick.\n\n## makeChannel(bufferSize, monitor)\n\nCreate a new channel.\n\nThe optional bufferSize is how many items can be in the queue and still be considered not full.\n\nThe optional monitor function will get called with `(type, item)` where `type` is either \"put\" or \"take\" and `item` is the value being put or taken.\n\n## channel.put(item) -> more\n\nThis is a sync function.  You can add as many items to the channel as you want and it will queue them up.\n\nThis returns `true` when the queue is smaller than bufferSize, it returns false if you should wait for drain.\n\n## channel.drain(callback)\n\nDrain is a reusable continuable.  Use this when you want to wait for the buffer to be below the bufferSize mark.\n\n## channel.take(callback)\n\nTake is for reading.  The callback will have the next item.  It may call sync or it may be later.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/creationix/culvert.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.1.2"
}
