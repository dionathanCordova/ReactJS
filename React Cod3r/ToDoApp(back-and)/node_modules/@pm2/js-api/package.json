{
  "_args": [
    [
      {
        "raw": "@pm2/js-api@^0.5.60",
        "scope": "@pm2",
        "escapedName": "@pm2%2fjs-api",
        "name": "@pm2/js-api",
        "rawSpec": "^0.5.60",
        "spec": ">=0.5.60 <0.6.0",
        "type": "range"
      },
      "C:\\Users\\Usuario\\Documents\\Cursos\\Curso React\\ReactJS\\React Cod3r\\ToDoApp(back-and)\\node_modules\\pm2"
    ]
  ],
  "_from": "@pm2/js-api@^0.5.60",
  "_hasShrinkwrap": false,
  "_id": "@pm2/js-api@0.5.60",
  "_location": "/@pm2/js-api",
  "_nodeVersion": "10.14.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/js-api_0.5.60_1560430292777_0.9569210297828175"
  },
  "_npmUser": {
    "name": "keymetrics_bot",
    "email": "tech@keymetrics.io"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "async-limiter": "1.0.1",
    "lodash": "4.17.14",
    "safe-buffer": "5.1.2",
    "ultron": "1.1.1"
  },
  "_requested": {
    "raw": "@pm2/js-api@^0.5.60",
    "scope": "@pm2",
    "escapedName": "@pm2%2fjs-api",
    "name": "@pm2/js-api",
    "rawSpec": "^0.5.60",
    "spec": ">=0.5.60 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pm2"
  ],
  "_resolved": "https://registry.npmjs.org/@pm2/js-api/-/js-api-0.5.60.tgz",
  "_shasum": "ae05324da8edc83f8f3172dadc5f9d5f16c99e54",
  "_shrinkwrap": null,
  "_spec": "@pm2/js-api@^0.5.60",
  "_where": "C:\\Users\\Usuario\\Documents\\Cursos\\Curso React\\ReactJS\\React Cod3r\\ToDoApp(back-and)\\node_modules\\pm2",
  "author": {
    "name": "Keymetrics Team"
  },
  "browser": {
    "./src/auth_strategies/embed_strategy.js": false,
    "ws": false
  },
  "browserify": {
    "debug": "true",
    "transform": [
      [
        "babelify",
        {
          "presets": [
            [
              "babel-preset-es2015",
              {
                "debug": "true",
                "sourceMaps": "true"
              }
            ]
          ]
        }
      ]
    ]
  },
  "bugs": {
    "url": "https://github.com/keymetrics/km.js/issues"
  },
  "dependencies": {
    "async": "^2.4.1",
    "axios": "^0.19.0",
    "debug": "^2.6.8",
    "eventemitter2": "^4.1.0",
    "ws": "^3.0.0"
  },
  "description": "PM2.io API Client for Javascript",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-preset-es2015": "*",
    "babel-preset-stage-2": "*",
    "babelify": "*",
    "browserify": "^13.1.0",
    "jsdoc": "^3.4.2",
    "minami": "^1.1.1",
    "mocha": "^3.0.2",
    "pm2": "latest",
    "should": "*",
    "standard": "^10.0.2",
    "uglify-js": "*"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-CvAbpIB7ObOuwvqhDBB/E4Z4ANRx2dBk08zYpGPNg+1fDj14FJg2e7DWA8bblSGNC8QarIXPaqPDJBL1e8cRQw==",
    "shasum": "ae05324da8edc83f8f3172dadc5f9d5f16c99e54",
    "tarball": "https://registry.npmjs.org/@pm2/js-api/-/js-api-0.5.60.tgz",
    "fileCount": 58,
    "unpackedSize": 2394332,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdAkbVCRA9TVsSAnZWagAAOxkQAJKgAk3fm2+OQC4JzQMN\nnI+kPZaR5vZl9xRTGn02hhJiRaJwo2rwHNjs1W+5GNyfIDSSp/2UZD/WSf/Z\n7VZjJZ6Aw0W4O0Ad3pGtOcqyiSCBLSIyADw+4cSI857Ud/wb7M447lHhR/Xl\niouy/SLOloDA9EtO0M89OUQ+ciHb8hR5Ab7YsYhW4ZYQTHy/r1JKQlF4j+YJ\nTchhnNv+Z3VQtBxCvoc5652sWlO3s2Oz4cEoDSqVVFFfMWjXUBv/WMY4KzIx\ndZTLaj35sdDa5kxKSSR2Wt8NKhtEMY93Z1LN+Fk9nz8V0LhidkCOmyVQQ/9x\nRBr7kVZov16fMgL4tAIKFfMYseQ+CzswRYtN0K30MbriJYvMRkqbEm+L7abv\ngt5YRs51uAqev+QC1yOd0dxVyRY86+eG+iaofOY+HseXSyEaW6TSwiPU+eym\nWPN7K/Lkm2efw9QVzE4QefBfPglpsvmLufSC2LF5rjjlnR7thawUVOV+tZX8\nXiU2BM5iQsg5a1NK416dp2I3YJOv788DSHgj2R0Ush24/AGnzBeyHCrW9z1y\n0aA7z8E7hzTEEjrugzE3JjfZ39+qxjAIjQRxW+op6zHuoHTavNAeeH+hy6Te\nLoBZeRN3LDv2+py7whZ/TXgK6PD0WxUgVSnSaNUGZ/m9cfKrpMhh25rEKVP8\ny0zs\r\n=/vy7\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=4.0"
  },
  "gitHead": "751078ac0bcd78719e18f770105705e2de4fe90a",
  "homepage": "https://github.com/keymetrics/km.js#readme",
  "keywords": [
    "keymetrics",
    "api",
    "dashboard",
    "monitoring",
    "wrapper"
  ],
  "license": "Apache 2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "eywek",
      "email": "contact@eywek.fr"
    },
    {
      "name": "keymetrics_bot",
      "email": "tech@keymetrics.io"
    },
    {
      "name": "tknew",
      "email": "strzelewicz.alexandre@gmail.com"
    }
  ],
  "name": "@pm2/js-api",
  "optionalDependencies": {},
  "readme": "# PM2.io API Client for Javascript\n\nThis module lets you implement a fully customizable PM2.io client, receiving live data from the PM2.io API.\n\n## Install\n\nWith NPM:\n\n```bash\n$ npm install @pm2/js-api --save\n```\n\nOr get the raw library for browser here:\n\n[https://unpkg.com/@pm2/js-api](https://unpkg.com/@pm2/js-api)\n\n## Usage\n\nTo use this client you need to first requiring it into your code and creating a new instance :\n\n```javascript\nconst PM2IO = require('@pm2/js-api')\n\nlet client = new PM2IO()\n```\n\nThen you'll to tell the client how you want to authenticate, you have the choice :\n\n- First the `standalone` flow, you just need to enter a refresh token and it will works\n```javascript\nclient.use('standalone', {\n  refresh_token: 'token'\n})\n```\n\n- Secondly, the `browser` flow, you have a custom keymetrics application and you want to authenticate of the behalf for any user (in this flow you need to be inside a browser) :\n```javascript\nclient.use('browser', {\n  client_id: 'my-oauth-client-id'\n})\n```\n\n- Thirdly, the `embed` flow, you have a custom keymetrics application and you want to authenticate of the behalf of any user (you need to be in a nodejs process, for example a CLI) :\n```javascript\nclient.use('embed', {\n  client_id: 'my-oauth-client-id'\n})\n```\n\nAfter that, you can do whatever call you want just keep in mind each call return a Promise (the client will handle authentication) :\n```javascript\nclient.user.retrieve()\n  .then((response) => {\n   // see https://github.com/mzabriskie/axios#response-schema\n   // for the content of response\n  }).catch((err) => {\n   // see https://github.com/mzabriskie/axios#handling-errors\n   // for the content of err\n  })\n```\n\n## Example\n\n```javascript\nconst PM2IO = require('@pm2/js-api')\n\nlet client = new PM2IO().use('standalone', {\n  refresh_token: 'token'\n})\n\n// retrieve our buckets\nclient.bucket.retrieveAll()\n  .then((res) => {\n    // find our bucket\n    let bucket = res.data.find(bucket => bucket.name === 'Keymetrics')\n\n    // connect to realtime data of a bucket\n    client.realtime.subscribe(bucket._id).catch(console.error)\n\n    // attach handler on specific realtime data\n    client.realtime.on(`${bucket.public_id}:connected`, () => console.log('connected to realtime'))\n    client.realtime.on(`${bucket.public_id}:*:status`, (data) => console.log(data.server_name))\n\n    // we can also unsubscribe from a bucket realtime data\n    setTimeout(() => {\n      client.realtime.unsubscribe(bucket._id).catch(console.error)\n    }, 5000)\n  })\n  .catch(console.error)\n```\n\n### Realtime\n\nAll realtime data are broadcasted with the following pattern :\n\n```\nbucket_public_id:server_name:data_method\n```\n\nFor example :\n\n```javascript\n// here i listen on the status data for\n// the server \"my_server\" on the bucket with\n// the public id 4398545\nclient.realtime.on(`4398545:my_server:status`, (data) => {\n  console.log(data.server_name))\n}\n```\n\n#### Events available\n\n| Event | Description |\n|-------|-------------|\n| mediator:blacklist | Used to broadcast updated process blacklisted |\n| human:event | Events sent via pmx.emit() |\n| process:exception | Issues from pm2 or apm |\n| logs | Logs |\n| status | Status sent by apm or pm2 |\n| metric | Metric sent by apm/collectors |\n| axm:transaction:outlier | Outlier for transaction tracing |\n| process:event | Event from pm2 (restart...) |\n| profiling | Profiling packet with profiling link |\n| axm:scoped_action:stream | Stream from scoped action |\n| axm:scoped_action:end | End of scoped action |\n| axm:scoped_action:error | Error for a scoped action |\n| pm2:scoped:end | End for pm2 scoped |\n| pm2:scoped:stream | Stream from pm2 scoped |\n| pm2:scoped:error | Error from pm2 scoped |\n| trace-span | Span for distributed tracing |\n| axm:transaction | Transaction for transaction tracing |\n| trigger:pm2:result | Result from a pm2 action |\n| trigger:action:success | Success from a custom action |\n| trigger:action:failure | Error from a customer action |\n| axm:reply | Reply from a custom action |\n\n## Route definition\n\n```\nclient.actions.triggerAction -> POST /api/bucket/:id/actions/trigger\nclient.actions.triggerPM2Action -> POST /api/bucket/:id/actions/triggerPM2\nclient.actions.triggerScopedAction -> POST /api/bucket/:id/actions/triggerScopedAction\nclient.bucket.sendFeedback -> PUT /api/bucket/:id/feedback\nclient.bucket.retrieveUsers -> GET /api/bucket/:id/users_authorized\nclient.bucket.currentRole -> GET /api/bucket/:id/current_role\nclient.bucket.setNotificationState -> POST /api/bucket/:id/manage_notif\nclient.bucket.inviteUser -> POST /api/bucket/:id/add_user\nclient.bucket.removeInvitation -> DELETE /api/bucket/:id/invitation\nclient.bucket.removeUser -> POST /api/bucket/:id/remove_user\nclient.bucket.setUserRole -> POST /api/bucket/:id/promote_user\nclient.bucket.retrieveAll -> GET /api/bucket/\nclient.bucket.create -> POST /api/bucket/create_classic\nclient.bucket.claimTrial -> PUT /api/bucket/:id/start_trial\nclient.bucket.upgrade -> POST /api/bucket/:id/upgrade\nclient.bucket.retrieve -> GET /api/bucket/:id\nclient.bucket.update -> PUT /api/bucket/:id\nclient.bucket.retrieveServers -> GET /api/bucket/:id/meta_servers\nclient.bucket.getSubscription -> GET /api/bucket/:id/subscription\nclient.bucket.destroy -> DELETE /api/bucket/:id\nclient.bucket.transferOwnership -> POST /api/bucket/:id/transfer_ownership\nclient.bucket.retrieveCharges -> GET /api/bucket/:id/payment/charges\nclient.bucket.updateUserOptions -> PUT /api/bucket/:id/user_options\nclient.bucket.alert.update -> POST /api/bucket/:id/alerts/update\nclient.bucket.alert.updateSlack -> POST /api/bucket/:id/alerts/updateSlack\nclient.bucket.alert.updateWebhooks -> POST /api/bucket/:id/alerts/updateWebhooks\nclient.bucket.alert.create -> POST /api/bucket/:id/alerts\nclient.bucket.alert.delete -> DELETE /api/bucket/:id/alerts/:alert\nclient.bucket.alert.list -> GET /api/bucket/:id/alerts/\nclient.bucket.alert.updateAlert -> PUT /api/bucket/:id/alerts/:alert\nclient.bucket.alert.get -> GET /api/bucket/:id/alerts/:alert\nclient.bucket.alert.triggerSample -> POST /api/bucket/:id/alerts/:alert/sample\nclient.bucket.alert.analyzer.list -> POST /api/bucket/:id/alerts/analyzer\nclient.bucket.alert.analyzer.editState -> PUT /api/bucket/:id/alerts/analyzer/:alert\nclient.bucket.alert.analyzer.updateConfig -> PUT /api/bucket/:id/alerts/analyzer/:analyzer/config\nclient.bucket.billing.subscribe -> POST /api/bucket/:id/payment/subscribe\nclient.bucket.billing.startTrial -> PUT /api/bucket/:id/payment/trial\nclient.bucket.billing.getInvoices -> GET /api/bucket/:id/payment/invoices\nclient.bucket.billing.getReceipts -> GET /api/bucket/:id/payment/receipts\nclient.bucket.billing.getSubcription -> GET /api/bucket/:id/payment/subscription\nclient.bucket.billing.getSubcriptionState -> GET /api/bucket/:id/payment/subscription/state\nclient.bucket.billing.attachCreditCard -> POST /api/bucket/:id/payment/cards\nclient.bucket.billing.fetchCreditCards -> GET /api/bucket/:id/payment/cards\nclient.bucket.billing.fetchCreditCard -> GET /api/bucket/:id/payment/card/:card_id\nclient.bucket.billing.fetchDefaultCreditCard -> GET /api/bucket/:id/payment/card\nclient.bucket.billing.updateCreditCard -> PUT /api/bucket/:id/payment/card\nclient.bucket.billing.deleteCreditCard -> DELETE /api/bucket/:id/payment/card/:card_id\nclient.bucket.billing.setDefaultCard -> POST /api/bucket/:id/payment/card/:card_id/default\nclient.bucket.billing.fetchMetadata -> GET /api/bucket/:id/payment\nclient.bucket.billing.updateMetadata -> PUT /api/bucket/:id/payment\nclient.bucket.billing.attachBankAccount -> POST /api/bucket/:id/payment/banks\nclient.bucket.billing.fetchBankAccount -> GET /api/bucket/:id/payment/banks\nclient.bucket.billing.deleteBankAccount -> DELETE /api/bucket/:id/payment/banks\nclient.data.dependencies.retrieve -> POST /api/bucket/:id/data/dependencies/\nclient.data.events.retrieve -> POST /api/bucket/:id/data/events\nclient.data.events.retrieveMetadatas -> GET /api/bucket/:id/data/eventsKeysByApp\nclient.data.events.retrieveHistogram -> POST /api/bucket/:id/data/events/stats\nclient.data.events.deleteAll -> DELETE /api/bucket/:id/data/events/delete_all\nclient.data.exceptions.retrieve -> POST /api/bucket/:id/data/exceptions\nclient.data.exceptions.retrieveSummary -> GET /api/bucket/:id/data/exceptions/summary\nclient.data.exceptions.deleteAll -> POST /api/bucket/:id/data/exceptions/delete_all\nclient.data.exceptions.delete -> POST /api/bucket/:id/data/exceptions/delete\nclient.data.issues.list -> POST /api/bucket/:id/data/issues/list\nclient.data.issues.listOccurencesForIdentifier -> GET /api/bucket/:id/data/issues/occurrences/:identifier\nclient.data.issues.getReplay -> GET /api/bucket/:id/data/issues/replay/:uuid\nclient.data.issues.retrieveHistogram -> POST /api/bucket/:id/data/issues/histogram\nclient.data.issues.findOccurences -> POST /api/bucket/:id/data/issues/ocurrences\nclient.data.issues.search -> POST /api/bucket/:id/data/issues/search\nclient.data.issues.summary -> GET /api/bucket/:id/data/issues/summary/:aggregateBy\nclient.data.issues.deleteAll -> DELETE /api/bucket/:id/data/issues\nclient.data.issues.delete -> DELETE /api/bucket/:id/data/issues/:identifier\nclient.data.logs.retrieve -> POST /api/bucket/:id/data/logs\nclient.data.logs.retrieveHistogram -> POST /api/bucket/:id/data/logs/histogram\nclient.data.metrics.retrieveAggregations -> POST /api/bucket/:id/data/metrics/aggregations\nclient.data.metrics.retrieveHistogram -> POST /api/bucket/:id/data/metrics/histogram\nclient.data.metrics.retrieveList -> POST /api/bucket/:id/data/metrics/list\nclient.data.metrics.retrieveMetadatas -> POST /api/bucket/:id/data/metrics\nclient.data.outliers.retrieve -> POST /api/bucket/:id/data/outliers/\nclient.data.processes.retrieveEvents -> POST /api/bucket/:id/data/processEvents\nclient.data.processes.retrieveDeployments -> POST /api/bucket/:id/data/processEvents/deployments\nclient.data.profiling.retrieve -> GET /api/bucket/:id/data/profilings/:filename\nclient.data.profiling.download -> GET /api/bucket/:id/data/profilings/:filename/download\nclient.data.profiling.list -> POST /api/bucket/:id/data/profilings\nclient.data.profiling.delete -> DELETE /api/bucket/:id/data/profilings/:filename\nclient.data.status.retrieve -> GET /api/bucket/:id/data/status\nclient.data.status.retrieveBlacklisted -> GET /api/bucket/:id/data/status/blacklisted\nclient.data.transactions.retrieveHistogram -> POST /api/bucket/:id/data/transactions/v2/histogram\nclient.data.transactions.retrieveSummary -> POST /api/bucket/:id/data/transactions/v2/summary\nclient.data.transactions.delete -> POST /api/bucket/:id/data/transactions/v2/delete\nclient.dashboard.retrieveAll -> GET /api/bucket/:id/dashboard/\nclient.dashboard.retrieve -> GET /api/bucket/:id/dashboard/:dashid\nclient.dashboard.remove -> DELETE /api/bucket/:id/dashboard/:dashid\nclient.dashboard.update -> POST /api/bucket/:id/dashboard/:dashId\nclient.dashboard.create -> PUT /api/bucket/:id/dashboard/\nclient.misc.listChangelogArticles -> GET /api/misc/changelog\nclient.misc.retrievePM2Version -> GET /api/misc/release/pm2\nclient.misc.retrieveNodeRelease -> GET /api/misc/release/nodejs/:version\nclient.misc.retrievePlans -> GET /api/misc/plans\nclient.misc.retrieveCoupon -> POST /api/misc/stripe/retrieveCoupon\nclient.misc.retrieveCompany -> POST /api/misc/stripe/retrieveCompany\nclient.misc.retrieveVAT -> POST /api/misc/stripe/retrieveVat\nclient.orchestration.selfSend -> POST /api/bucket/:id/balance\nclient.bucket.server.deleteServer -> POST /api/bucket/:id/data/deleteServer\nclient.tokens.retrieve -> GET /api/users/token/\nclient.tokens.remove -> DELETE /api/users/token/:id\nclient.tokens.create -> PUT /api/users/token/\nclient.user.retrieve -> GET /api/users/isLogged\nclient.user.show -> GET /api/users/show/:id\nclient.user.update -> POST /api/users/update\nclient.user.delete -> DELETE /api/users/delete\nclient.user.attachCreditCard -> POST /api/users/payment/\nclient.user.listSubscriptions -> GET /api/users/payment/subcriptions\nclient.user.listCharges -> GET /api/users/payment/charges\nclient.user.fetchCreditCard -> GET /api/users/payment/card/:card_id\nclient.user.fetchDefaultCreditCard -> GET /api/users/payment/card\nclient.user.updateCreditCard -> PUT /api/users/payment/card\nclient.user.deleteCreditCard -> DELETE /api/users/payment/card/:card_id\nclient.user.setDefaultCard -> POST /api/users/payment/card/:card_id/default\nclient.user.fetchMetadata -> GET /api/users/payment/card/stripe_metadata\nclient.user.updateMetadata -> PUT /api/users/payment/stripe_metadata\nclient.user.otp.retrieve -> GET /api/users/otp\nclient.user.otp.enable -> POST /api/users/otp\nclient.user.otp.disable -> DELETE /api/users/otp\nclient.user.providers.retrieve -> GET /api/users/integrations\nclient.user.providers.add -> POST /api/users/integrations\nclient.user.providers.remove -> DELETE /api/users/integrations/:name\nclient.bucket.webcheck.listMetrics -> GET /api/bucket/:id/webchecks/metrics\nclient.bucket.webcheck.listRegions -> GET /api/bucket/:id/webchecks/regions\nclient.bucket.webcheck.getMetrics -> POST /api/bucket/:id/webchecks/:webcheck/metrics\nclient.bucket.webcheck.list -> GET /api/bucket/:id/webchecks\nclient.bucket.webcheck.get -> GET /api/bucket/:id/webchecks/:webcheck\nclient.bucket.webcheck.create -> POST /api/bucket/:id/webchecks\nclient.bucket.webcheck.update -> PUT /api/bucket/:id/webchecks/:webcheck\nclient.bucket.webcheck.delete -> DELETE /api/bucket/:id/webchecks/:webcheck\nclient.auth.retrieveToken -> POST /api/oauth/token\nclient.auth.requestNewPassword -> POST /api/oauth/reset_password\nclient.auth.sendEmailLink -> POST /api/oauth/send_email_link\nclient.auth.validEmail -> GET /api/oauth/valid_email/:token\nclient.auth.register -> GET /api/oauth/register\nclient.auth.revoke -> POST /api/oauth/revoke\nclient.data.traces.list -> POST /api/bucket/:id/data/traces\nclient.data.traces.retrieve -> GET /api/bucket/:id/data/traces/:trace\nclient.data.traces.getServices -> GET /api/bucket/:id/data/traces/services\nclient.data.traces.getTags -> GET /api/bucket/:id/data/traces/tags\nclient.data.traces.getHistogramByTag -> POST /api/bucket/:id/data/traces/histogram/tag\nclient.data.notifications.list -> POST /api/bucket/:id/data/notifications\nclient.data.notifications.retrieve -> GET /api/bucket/:id/data/notifications/:notification\nclient.bucket.application.list -> GET /api/bucket/:id/applications\nclient.bucket.application.get -> GET /api/bucket/:id/applications/:application\nclient.bucket.application.create -> POST /api/bucket/:id/applications\nclient.bucket.application.update -> PUT /api/bucket/:id/applications/:application\nclient.bucket.application.delete -> DELETE /api/bucket/:id/applications/:application\nclient.bucket.application.getPreview -> GET /api/bucket/:id/applications/:application/preview\nclient.bucket.application.getReports -> GET /api/bucket/:id/applications/:application/report\n```\n\n## Local Backend\n\n- Create token in user setting then:\n\n### Standalone logging\n\n```javascript\nconst PM2IO = require('@pm2/js-api')\n\nlet io = new PM2IO({\n  services: {\n    API: 'http://cl1.km.io:3000',\n    OAUTH: 'http://cl1.km.io:3100'\n  }\n}).use('standalone', {\n  refresh_token: 'refresh-token'\n})\n```\n\n### Browser logging\n\n```javascript\nconst PM2IO = require('@pm2/js-api')\n\nlet io = new PM2IO({\n  OAUTH_CLIENT_ID: '5413907556',\n  services: {\n    API: 'http://cl1.km.io:3000',\n    OAUTH: 'http://cl1.km.io:3100'\n  }\n}).use('standalone', {\n  refresh_token: 'refresh-token'\n})\n```\n\n## Tasks\n\n```\n# Browserify + Babelify to ES5 (output to ./dist/keymetrics.es5.js)\n$ npm run build\n# Browserify + Babelify + Uglify (output to ./dist/keymetrics.min.js)\n$ npm run dist\n# Generate documentation\n$ npm run doc\n```\n\n## License\n\nApache 2.0\n\n## Release\n\n## Release\n\nTo release a new version, first install [gren](https://github.com/github-tools/github-release-notes) :\n```bash\nyarn global add github-release-notes\n```\n\nPush a commit in github with the new version you want to release :\n```\ngit commit -am \"version: major|minor|patch bump to X.X.X\"\n```\n\nCare for the **versionning**, we use the [semver versioning](https://semver.org/) currently. Please be careful about the version when pushing a new package.\n\nThen tag a version with git :\n```bash\ngit tag -s vX.X.X\n```\n\nPush the tag into github (this will trigger the publish to npm) :\n```\ngit push origin vX.X.X\n```\n\nTo finish update the changelog of the release on github with `gren` (be sure that gren has selected the right tags):\n```\ngren release -o -D commits -u keymetrics -r pm2-io-js-api\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/keymetrics/km.js.git"
  },
  "scripts": {
    "build": "browserify -s Keymetrics -r ./ > ./dist/keymetrics.es5.js",
    "clean": "rm dist/*",
    "dist": "browserify -s Keymetrics -r ./ | uglifyjs -c warnings=false -m > ./dist/keymetrics.es5.min.js",
    "doc": "jsdoc -r ./src --readme ./README.md -d doc -t ./node_modules/minami",
    "test": "mocha test/*"
  },
  "standard": {
    "ignore": [
      "dist/**",
      "examples/**",
      "test/**"
    ]
  },
  "unpkg": "dist/keymetrics.es5.min.js",
  "version": "0.5.60"
}
