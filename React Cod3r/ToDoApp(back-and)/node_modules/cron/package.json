{
  "_args": [
    [
      {
        "raw": "cron@1.7.1",
        "scope": null,
        "escapedName": "cron",
        "name": "cron",
        "rawSpec": "1.7.1",
        "spec": "1.7.1",
        "type": "version"
      },
      "C:\\Users\\Usuario\\Documents\\Cursos\\Curso React\\ReactJS\\React Cod3r\\ToDoApp(back-and)\\node_modules\\pm2"
    ]
  ],
  "_from": "cron@1.7.1",
  "_hasShrinkwrap": false,
  "_id": "cron@1.7.1",
  "_location": "/cron",
  "_nodeVersion": "10.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cron_1.7.1_1556323406723_0.15867054871761166"
  },
  "_npmUser": {
    "name": "ncb000gt",
    "email": "nicholas.j.campbell@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cron@1.7.1",
    "scope": null,
    "escapedName": "cron",
    "name": "cron",
    "rawSpec": "1.7.1",
    "spec": "1.7.1",
    "type": "version"
  },
  "_requiredBy": [
    "/pm2"
  ],
  "_resolved": "https://registry.npmjs.org/cron/-/cron-1.7.1.tgz",
  "_shasum": "e85ee9df794d1bc6579896ee382053c3ce33778f",
  "_shrinkwrap": null,
  "_spec": "cron@1.7.1",
  "_where": "C:\\Users\\Usuario\\Documents\\Cursos\\Curso React\\ReactJS\\React Cod3r\\ToDoApp(back-and)\\node_modules\\pm2",
  "author": {
    "name": "Nick Campbell",
    "email": "nicholas.j.campbell@gmail.com",
    "url": "http://github.com/ncb000gt"
  },
  "bugs": {
    "url": "http://github.com/kelektiv/node-cron/issues"
  },
  "contributors": [
    {
      "name": "Romain Beauxis",
      "email": "toots@rastageeks.org",
      "url": "https://github.com/toots"
    },
    {
      "name": "James Padolsey",
      "url": "https://github.com/jamespadolsey"
    },
    {
      "name": "Finn Herpich",
      "email": "fh@three-heads.de",
      "url": "https://github.com/ErrorProne"
    },
    {
      "name": "Clifton Cunningham",
      "email": "clifton.cunningham@gmail.com",
      "url": "https://github.com/cliftonc"
    },
    {
      "name": "Eric Abouaf",
      "email": "eric.abouaf@gmail.com",
      "url": "https://github.com/neyric"
    },
    {
      "name": "humanchimp",
      "email": "morphcham@gmail.com",
      "url": "https://github.com/humanchimp"
    },
    {
      "name": "Craig Condon",
      "email": "craig@spiceapps.com",
      "url": "https://github.com/spiceapps"
    },
    {
      "name": "Dan Bear",
      "email": "daniel@hulu.com",
      "url": "https://github.com/danhbear"
    },
    {
      "name": "Vadim Baryshev",
      "email": "vadimbaryshev@gmail.com",
      "url": "https://github.com/baryshev"
    },
    {
      "name": "Leandro Ferrari",
      "email": "lfthomaz@gmail.com",
      "url": "https://github.com/lfthomaz"
    },
    {
      "name": "Gregg Zigler",
      "email": "greggzigler@gmail.com",
      "url": "https://github.com/greggzigler"
    },
    {
      "name": "Jordan Abderrachid",
      "email": "jabderrachid@gmail.com",
      "url": "https://github.com/jordanabderrachid"
    },
    {
      "name": "Masakazu Matsushita",
      "email": "matsukaz@gmail.com",
      "url": "matsukaz"
    }
  ],
  "dependencies": {
    "moment-timezone": "^0.5.x"
  },
  "description": "Cron jobs for your node",
  "devDependencies": {
    "chai": "~4.2.x",
    "eslint": "~5.13.x",
    "eslint-config-prettier": "~4.0.x",
    "eslint-config-standard": "~12.0.x",
    "eslint-plugin-import": "~2.16.x",
    "eslint-plugin-node": "~8.0.x",
    "eslint-plugin-prettier": "~3.0.x",
    "eslint-plugin-promise": "~4.0.x",
    "eslint-plugin-standard": "~4.0.x",
    "mocha": "~5.2.x",
    "prettier": "~1.16.x",
    "sinon": "~7.2.x"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-gmMB/pJcqUVs/NklR1sCGlNYM7TizEw+1gebz20BMc/8bTm/r7QUp3ZPSPlG8Z5XRlvb7qhjEjq/+bdIfUCL2A==",
    "shasum": "e85ee9df794d1bc6579896ee382053c3ce33778f",
    "tarball": "https://registry.npmjs.org/cron/-/cron-1.7.1.tgz",
    "fileCount": 28,
    "unpackedSize": 67016,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcw5xPCRA9TVsSAnZWagAAgTsP/1e3D9zPebgWV84JpkZJ\n4d4eneNQQ07yqkP8xXpxfT2uuxOocNETYErCkCo5P4r2MGcRmfm5GI4MsUst\nlK0q3yT4+CmWbbna4uK4saemtEn/CG/BskOlTtTtC1VUClXNmKvkUm4U2qMu\nJMTiuL29ksmkVyU02FgBrqaU4qTAdniiwo/xPylMpjTxfWDYN3lcfstjT78f\nL1g0UZQTVCtTZPvW3yRUk5OrnV6xskJF+ixmMGzbOCt2Siq7P25uLXBc3MmO\neKGV7kgBe5gmgPbMuYSd12LT6bb4q5UoJBpd7gxRNFbHeR/MNLWaKktVrozp\nzpLpD9XqLx893tGFud+nt9+gtA9wQkiD5Ko1stOck/oORN4NVKyUyxggHoPj\neUmFYFz3lyjKCUJN5SqFrERIfmAc7bPZaoOBBWfijXUvd2KDqVmZposoaZWH\n372Z/Wg0DKhFDwH/VR1jrcqIlrQ3L6WdbYTKG6fet3VH60AsrV/eUdTgKJAM\njbYZ+zlJoh5YNb+jVrR8eDkUjmo9K7pupqiOkYeZXDbX/20rmgIjd1OgSYkc\npq3LdN0mBzfJ+9siMcbalrxGhTUbvbnQvmksYNuBitfb6wjkvKbq0KzMf7tJ\ntE+Qt5SSPyN3TArpq65TLu8Y1rIM4w4N/Dq23TEYxptX4Mn/9kstv2+WVKkg\nLIA4\r\n=US2W\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "96060bb3b02c3727b735922e887bd0e424910c44",
  "homepage": "https://github.com/kelektiv/node-cron#readme",
  "keywords": [
    "cron",
    "node cron",
    "node-cron",
    "schedule",
    "scheduler",
    "cronjob",
    "cron job"
  ],
  "license": "MIT",
  "main": "lib/cron",
  "maintainers": [
    {
      "name": "jodevsa",
      "email": "jodevsa@gmail.com"
    },
    {
      "name": "ncb000gt",
      "email": "nicholas.j.campbell@gmail.com"
    }
  ],
  "name": "cron",
  "optionalDependencies": {},
  "readme": "node-cron\n=\n\n[![Build Status](https://travis-ci.org/kelektiv/node-cron.svg?branch=master)](https://travis-ci.org/#!/kelektiv/node-cron)\n[![Dependency Status](https://david-dm.org/ncb000gt/node-cron.svg)](https://david-dm.org/ncb000gt/node-cron)\n\nCron is a tool that allows you to execute _something_ on a schedule. This is\ntypically done using the cron syntax. We allow you to execute a function\nwhenever your scheduled job triggers. We also allow you to execute a job\nexternal to the javascript process using `child_process`. Additionally, this\nlibrary goes beyond the basic cron syntax and allows you to \nsupply a Date object. This will be used as the trigger for your callback. Cron \nsyntax is still an acceptable CronTime format. Although the Cron patterns \nsupported here extend on the standard Unix format to support seconds digits, \nleaving it off will default to 0 and match the Unix behavior.\n\n\nInstallation\n==\n\n    npm install cron\n\n\nIf You Are Submitting Bugs/Issues\n==\n\nBecause we can't magically know what you are doing to expose an issue, it is\nbest if you provide a snippet of code. This snippet need not include your secret\nsauce, but it must replicate the issue you are describing. The issues that get\nclosed without resolution tend to be the ones without code examples. Thanks.\n\n\nVersions and Backwards compatibility breaks:\n==\n\nAs goes with semver, breaking backwards compatibility should be explicit in the\nversioning of your library. As such, we'll upgrade the version of this module\nin accordance with breaking changes (I'm not always great about doing it this\nway so if you notice that there are breaking changes that haven't been bumped\nappropriately please let me know).\n\n\nUsage (basic cron usage):\n==\n\n```javascript\nvar CronJob = require('cron').CronJob;\nnew CronJob('* * * * * *', function() {\n  console.log('You will see this message every second');\n}, null, true, 'America/Los_Angeles');\n```\n\nNote - You need to explicitly start a job in order to make it run. This gives a\nlittle more control over running your jobs.\n\nThere are more examples available in this repository at:\n[/examples](https://github.com/kelektiv/node-cron/tree/master/examples)\n\n\nAvailable Cron patterns:\n==\n\n    Asterisk. E.g. *\n    Ranges. E.g. 1-3,5\n    Steps. E.g. */2\n\n[Read up on cron patterns here](http://crontab.org). Note the examples in the\nlink have five fields, and 1 minute as the finest granularity, but this library\nhas six fields, with 1 second as the finest granularity.\n\nThere are tools that help when constructing your cronjobs. You might find\nsomething like https://crontab.guru/ or https://cronjob.xyz/ helpful. But,\nnote that these don't necessarily accept the exact same syntax as this\nlibrary, for instance, it doesn't accept the `seconds` field, so keep that in\nmind.\n\n\nCron Ranges\n==\n\nWhen specifying your cron values you'll need to make sure that your values fall\nwithin the ranges. For instance, some cron's use a 0-7 range for the day of\nweek where both 0 and 7 represent Sunday. We do not.\n\n * Seconds: 0-59\n * Minutes: 0-59\n * Hours: 0-23\n * Day of Month: 1-31\n * Months: 0-11 (Jan-Dec)\n * Day of Week: 0-6 (Sun-Sat)\n\n\nGotchas\n==\n\n* Millisecond level granularity in JS or moment date objects.\n    Because computers take time to do things, there may be some delay in execution.\n    This should be on the order of milliseconds. This module doesn't allow MS level\n    granularity for the regular cron syntax, but _does_ allow you to specify a real\n    date of execution in either a javascript date object or a moment object.\n\t\tWhen this happens you may find that you aren't able to execute a job that\n\t\t_should_ run in the future like with `new Date().setMilliseconds(new\n\t\tDate().getMilliseconds() + 1)`. This is due to those cycles of execution\n\t\tabove. This wont be the same for everyone because of compute speed. When I\n\t\ttried it locally I saw that somewhere around the 4-5 ms mark was where I got\n\t\tconsistent ticks using real dates, but anything less than that would result\n\t\tin an exception. This could be really confusing. We could restrict the\n\t\tgranularity for all dates to seconds, but felt that it wasn't a huge problem\n\t\tso long as you were made aware. If this becomes more of an issue, We can\n\t\trevisit it.\n* Arrow Functions for `onTick`\n    Arrow functions get their `this` context from their parent scope. Thus, if you use them, you will not get\n    the `this` context of the cronjob. You can read a little more in this ticket [GH-40](https://github.com/kelektiv/node-cron/issues/47#issuecomment-459762775)\n\n\nAPI\n==\n\nParameter Based\n\n* `job` - shortcut to `new cron.CronJob()`.\n* `time` - shortcut to `new cron.CronTime()`.\n* `sendAt` - tells you when a `CronTime` will be run.\n* `timeout` - tells you when the next timeout is.\n* `CronJob`\n  * `constructor(cronTime, onTick, onComplete, start, timezone, context,\n\trunOnInit, unrefTimeout)` - Of note, the first parameter here can be a JSON object that\n\thas the below names and associated types (see examples above).\n    * `cronTime` - [REQUIRED] - The time to fire off your job. This can be in\n\t\tthe form of cron syntax or a JS\n\t\t[Date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) object.\n    * `onTick` - [REQUIRED] - The function to fire at the specified time. If an\n\t\t`onComplete` callback was provided, `onTick` will receive it as an argument.\n\t\t`onTick` may call `onComplete` when it has finished its work.\n    * `onComplete` - [OPTIONAL] - A function that will fire when the job is\n\t\tstopped with `job.stop()`, and may also be called by `onTick` at the end of each run.\n    * `start` - [OPTIONAL] - Specifies whether to start the job just before\n\t\texiting the constructor. By default this is set to false. If left at default\n\t\tyou will need to call `job.start()` in order to start the job (assuming\n\t\t`job` is the variable you set the cronjob to). This does not immediately\n\t\tfire your `onTick` function, it just gives you more control over the\n\t\tbehavior of your jobs.\n    * `timeZone` - [OPTIONAL] - Specify the timezone for the execution. This\n\t\twill modify the actual time relative to your timezone. If the timezone is\n\t\tinvalid, an error is thrown. You can check all timezones available at\n\t\t[Moment Timezone Website](http://momentjs.com/timezone/). Probably don't use\n\t\tboth.\n\t\t`timeZone` and `utcOffset` together or weird things may happen.\n    * `context` - [OPTIONAL] - The context within which to execute the onTick\n\t\tmethod. This defaults to the cronjob itself allowing you to call\n\t\t`this.stop()`. However, if you change this you'll have access to the\n\t\tfunctions and values within your context object.\n    * `runOnInit` - [OPTIONAL] - This will immediately fire your `onTick`\n\t\tfunction as soon as the requisite initialization has happened. This option\n\t\tis set to `false` by default for backwards compatibility.\n    * `utcOffset` - [OPTIONAL] - This allows you to specify the offset of your\n\t\ttimezone rather than using the `timeZone` param. Probably don't use both\n\t\t`timeZone` and `utcOffset` together or weird things may happen.\n    * `unrefTimeout` - [OPTIONAL] - If you have code that keeps the event loop\n\t\trunning and want to stop the node process when that finishes regardless of\n\t\tthe state of your cronjob, you can do so making use of this parameter. This\n\t\tis off by default and cron will run as if it needs to control the event\n\t\tloop. For more information take a look at\n\t\t[timers#timers_timeout_unref](https://nodejs.org/api/timers.html#timers_timeout_unref)\n\t\tfrom the NodeJS docs.\n  * `start` - Runs your job.\n  * `stop` - Stops your job.\n  * `setTime` - Change the time for the `CronJob`. Param must be a `CronTime`.\n  * `lastDate` - Tells you the last execution date.\n  * `nextDates` - Provides an array of the next set of dates that will trigger an `onTick`.\n  * `fireOnTick` - Allows you to override the `onTick` calling behavior. This\n\tmatters so only do this if you have a really good reason to do so.\n  * `addCallback` - Allows you to add `onTick` callbacks.\n* `CronTime`\n  * `constructor(time)`\n    * `time` - [REQUIRED] - The time to fire off your job. This can be in the\n\t\tform of cron syntax or a JS\n\t\t[Date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date)\n\t\tobject.\n\n\nContributions\n==\n\nThis is a community effort project. In the truest sense, this project started as\nan open source project from [cron.js](http://github.com/padolsey/cron.js) and\ngrew into something else. Other people have contributed code, time, and\noversight to the project. At this point there are too many to name here so I'll\njust say thanks.\n\n\nLicense\n==\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/kelektiv/node-cron.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.7.1"
}
